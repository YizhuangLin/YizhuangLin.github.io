[{"content":" Who am i? # ","date":"15 August 2023","permalink":"/","section":"123","summary":"Who am i?","title":"123"},{"content":"","date":"15 August 2023","permalink":"/tags/docker/","section":"Tags","summary":"","title":"docker"},{"content":" CST8254 # Important: Once you are asked to make a screenshot, you must upload the screenshot to Bright space right away.\nSummer 23 # Install Docker on your raspberry Pi.\nUpdate the system:\nsudo apt update sudo apt upgrade Install Docker dependencies:\nsudo apt install apt-transport-https ca-certificates software-properties-common Add Docker\u0026rsquo;s GPG key:\ncurl -fsSL https://download.docker.com/linux/raspbian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg Add Docker\u0026rsquo;s official repository:\necho \u0026#34;deb [arch=armhf signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null Update the package lists again:\nsudo apt update Install Docker:\nsudo apt install docker-ce docker-ce-cli containerd.io Add your username to the docker group to run Docker commands without sudo:\nsudo usermod -aG docker \u0026lt;username\u0026gt; Restart the Raspberry Pi:\nsudo reboot After the reboot, Docker should be installed and running on your Raspberry Pi. You can verify the installation by running the following command:\ndocker version Install docker-compose on your raspberry Pi.\nTo install Docker Compose on your Raspberry Pi, you can follow these steps:\nUpdate the system:\nsudo apt update sudo apt upgrade Install dependencies:\nsudo apt install -y libffi-dev libssl-dev python3 python3-pip Install Docker Compose using pip3:\nsudo pip3 install docker-compose Verify the installation by checking the Docker Compose version:\ndocker-compose --version In your home Pi folder,\nCreate a folder MT302S23\nCreate a folder wordpress in your MT302S23 folder\nInside the wordpress folder, create a file docker-compose.yml\nCut and paste the following code into that file\nversion: \u0026#39;3.3\u0026#39; services: db: image: hypriot/rpi-mysql volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress networks: - wpsite wordpress: depends_on: - db image: wordpress:latest ports: - \u0026#39;8080:80\u0026#39; restart: always volumes: [\u0026#39;./:/var/www/html\u0026#39;] environment: WORDPRESS_DB_HOST: db:33060 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress networks: - wpsite networks: wpsite: volumes: db_data: Modify the file so that:\nyour pi is mapping its wordpress port 8080 to port 80 your pi is mapping the mysql port 33060 to port 3306 the MYSQL_ROOT_PASSWORD is your userid/username (first part of your email address) the MYSQL_DATABASE is u. for instance if your student number is 040123456 the db name is u040123456 the MYSQL_USER is your userid/username (first part of your email address) the MYSQL_PASSWORD is mywordpress You need to ensure that wordpress and sql configuration information is the same, you need to follow the \u0026lt;enviroment\u0026gt; part below to adjust the part, the other parts according to the task requirements can be changed. (Remember to replace your student information:\u0026lt;username\u0026gt; u\u0026lt;student number\u0026gt;)\nversion: \u0026#39;3.3\u0026#39; services: db: image: hypriot/rpi-mysql volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: \u0026lt;username\u0026gt; MYSQL_DATABASE: u\u0026lt;student number\u0026gt; MYSQL_USER: \u0026lt;username\u0026gt; MYSQL_PASSWORD: mywordpress networks: - wpsite wordpress: depends_on: - db image: wordpress:latest ports: - \u0026#39;8080:80\u0026#39; restart: always volumes: [\u0026#39;./:/var/www/html\u0026#39;] environment: WORDPRESS_DB_HOST: db:33060 WORDPRESS_DB_USER: \u0026lt;username\u0026gt; WORDPRESS_DB_PASSWORD: mywordpress WORDPRESS_DB_NAME:u\u0026lt;student number\u0026gt; networks: - wpsite networks: wpsite: volumes: db_data: Once the file is saved, issue the following command:\nCOMPOSE_HTTP_TIMEOUT=200\nCreate the container (it may take a few minutes).\nIf you get a timeout error, recreate the container after a few seconds using the -force-recreate option. Navigate to the directory where your docker-compose.yml file is located. In your case, it should be inside the wordpress folder within the MT302S23 folder.\ncd ~/MT302S23/wordpress Run the docker-compose up command to create and start the containers:\ndocker-compose up Docker Compose will read the docker-compose.yml file and create the specified services, which in your case are the db and wordpress services.\nThe first time you run this command, Docker will pull the necessary Docker images if they are not already present on your Raspberry Pi. This step may take a few minutes depending on your internet connection and the size of the images.\nIf you encounter a timeout error during the image pull or container creation, you can try to recreate the container by adding the --force-recreate option:\ndocker-compose up --force-recreate This option forces the recreation of containers even if they are already running.\nOnce the containers are successfully created and started, you should see the logs from the containers in the terminal. You can keep the terminal open to monitor the logs or open a new terminal window to continue using the command line.\nIf everything goes well, you should be able to access your WordPress site by opening a web browser and navigating to http://localhost or http://\u0026lt;Raspberry Pi IP address\u0026gt;. The WordPress installation process should start, and you can proceed with the setup.\nOther available commands # If something wrong, use these command to check.\nCheck the database container logs for any error messages or connection issues. Run the following command to view the logs:\ndocker-compose logs db Look for any error messages related to the database server.\nConfirm that the database container is running. Run the following command to check the status of the containers:\ndocker-compose ps Ensure that both the db and wordpress containers are in the \u0026ldquo;Up\u0026rdquo; state.\nDelete the original image and recreate it after updating the configuration file.\nClean up existing containers and volumes: Run the following command to stop and delete existing databases and WordPress containers, and delete the associated volumes. Please note that this will delete existing data.\ndocker-compose down -v Update the image and recreate the container: Run the following command to pull the latest image and recreate the container.\ndocker-compose pull docker-compose up -d **d**flag will run the container in the background. Check the container status: Run the following command to check the status of the container.\ndocker-compose ps Ensure that both services are running.（db \u0026amp; wordpress）\nFrom the MT302S23 folder, issue the tree command and save the output to a file named mt.txt.\nFrom the MT302S23 folder, issue the clear command .\nFrom the MT302S23 folder, issue the following commands one by one\ndate ls -als hostname -i docker ps -a docker images Take a screenshot of the resulting window. screen1.png.\nTake a screenshot of the output of the command that displays which tcp port the Pi is listening to. screen2.png\nRun the following command to display the listening TCP ports:\nsudo netstat -tuln From your laptop, connect to the Pi wordpress site and set up wordpress with values of your choice for the site title, username and password. Once wordpress is installed, log on to wordpress.\nTake a screenshot of the Wordpress admin site and a screenshot of the site itself. The 2 screenshots must show the IP of the Pi in the address bar. screen3.png (admin) and screen4.png (site) On your Pi, find the IP address that has been assigned to the database container:\nTake a screenshot of the command used and its result. screen5.png Run the following command to get the container ID of the database container:\ndocker ps -f name=wordpress_db_1 -q This command filters the running containers and returns the container ID of the database container (wordpress_db_1 in this case).\nOnce you have the container ID, run the following command to inspect the container and retrieve its IP address:\ndocker inspect -f \u0026#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39; \u0026lt;container_id\u0026gt; Replace \u0026lt;container_id\u0026gt; with the actual container ID you obtained in the previous step.\nThe command will output the IP address assigned to the database container. Note down this IP address for further use.\nBy following these steps, you will be able to find the IP address assigned to the database container on your Pi.\nConnect to the mySql server using a TCP connection to that IP address. Access the container via Bash then connect to mysql.\nTake a screenshot of the command used and its result. screen6.png Use the docker ps command to find the container ID of the database container. Run the following command:\ndocker ps -f name=wordpress_db_1 -q This command will display the container ID of the database container (wordpress_db_1 in this case).\nOnce you have the container ID, access the container\u0026rsquo;s Bash shell using the docker exec command. Run the following command:\ndocker exec -it \u0026lt;container_id\u0026gt; bash Replace \u0026lt;container_id\u0026gt; with the actual container ID you obtained in the previous step.\nYou will now be inside the container\u0026rsquo;s Bash shell. To connect to the MySQL server, run the following command:\nmysql -h localhost -u \u0026lt;username\u0026gt; -p This command connects to the MySQL server running inside the container using the specified hostname (localhost), username (**\u0026lt;username\u0026gt;**), and prompts for the password.\nEnter the MySQL root password when prompted. Press Enter.\nYou should now be connected to the MySQL server and have access to the MySQL command prompt.\n","date":"15 August 2023","permalink":"/posts/mid-term-practical/","section":"Posts","summary":"CST8254 # Important: Once you are asked to make a screenshot, you must upload the screenshot to Bright space right away.","title":"Mid Term Practical"},{"content":"","date":"15 August 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"15 August 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]